version: "3.8"

# downloaded from: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html
# using command: curl -LfO 'https://airflow.apache.org/docs/apache-airflow/2.9.2/docker-compose.yaml'
x-airflow-common: &airflow-common
  # build:
  #   dockerfile: airflowDb.Dockerfile
  image: ${AIRFLOW_IMAGE_NAME:-roadaccidentsmlops24/airflowdb}
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.2}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'

    # AIRFLOW__SMTP__SMTP_HOST: "smtp.gmail.com"
    # AIRFLOW__SMTP__SMTP_PORT: 587
    # AIRFLOW__SMTP__SMTP_USER: "de.airflow@gmail.com"
    # AIRFLOW__SMTP__SMTP_PASSWORD: "cfsrvkongsobheta"
    # AIRFLOW__SMTP__SMTP_MAIL_FROM: "de.airflow@gmail.com"
    ADMIN_USERNAME: ${ADMIN_USERNAME}
    ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    ROAD_ACCIDENTS_POSTGRES_HOST: ${ROAD_ACCIDENTS_POSTGRES_HOST}
    ROAD_ACCIDENTS_POSTGRES_PORT: ${ROAD_ACCIDENTS_POSTGRES_PORT}
    ROAD_ACCIDENTS_POSTGRES_DB: ${ROAD_ACCIDENTS_POSTGRES_DB}
    ROAD_ACCIDENTS_DIRS: ${ROAD_ACCIDENTS_DIRS}
    ROAD_ACCIDENTS_RAW_CSV_FILES_ROOT_DIR: ${ROAD_ACCIDENTS_RAW_CSV_FILES_ROOT_DIR}
    AIRFLOW_NEW_DATA_IN_ROAD_ACCIDENTS_DB_VARNAME: ${AIRFLOW_NEW_DATA_IN_ROAD_ACCIDENTS_DB_VARNAME}
    _AIRFLOW_WWW_USER_USERNAME: ${ADMIN_USERNAME}
    _AIRFLOW_WWW_USER_PASSWORD: ${ADMIN_PASSWORD}

    # _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- pandas }
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./Volumes/airflow/config:/opt/airflow/config
    - ./Volumes/airflow/logs:/opt/airflow/logs
    - ./Volumes/airflow/plugins:/opt/airflow/plugins
    - ./Volumes/data:${ROAD_ACCIDENTS_RAW_CSV_FILES_ROOT_DIR}
    - ./Volumes/models:/models
    - ./Volumes/mlruns:/mlruns
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:

  postgres_road_accidents:
    container_name: postgres_road_accidents
    image: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${ADMIN_USERNAME}
      POSTGRES_PASSWORD: ${ADMIN_PASSWORD}
      POSTGRES_DB: ${ROAD_ACCIDENTS_POSTGRES_DB}
    ports:
      - "5433:${ROAD_ACCIDENTS_POSTGRES_PORT}"
    volumes:
      - ./Volumes/db:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${ADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      PGPASSFILE: /pgpass
    volumes:
      - ./Volumes/db_admin:/var/lib/pgadmin
    depends_on:
      - postgres_road_accidents
    entrypoint: /bin/sh -c "chown 5050:5050 /pgpass;chmod 0600 /pgpass; /entrypoint.sh;"
    user: root
    configs:
      - source: pgadmin_servers_conf_json
        target: /pgadmin4/servers.json
      - source: pgadmin_pgpass_conf_file
        target: /pgpass

  model_api:
    image: roadaccidentsmlops24/model_api:latest
    container_name: model_api_from_compose
    volumes:
      - ./Volumes/models:/models
    environment:
      MODEL_PATH: /models/${MODEL_FILENAME}
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    ports:
      - ${MODEL_API_PORTS}

  UI:
    image: roadaccidentsmlops24/accidents_ui:latest
    container_name: model_ui_from_compose
    ports:
      - 8501:8501
    volumes:
      - ./Volumes/models:/models
      - ./Volumes/data:/data
    environment:
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    command: bash -c "
       chmod -R 777 /models &&
       chmod -R 777 /data  "
    build: # TODO we should remove this from here as the CI/CD pipeline will publish the docker images to docker hub
      dockerfile: UI.Dockerfile

# Airflow
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./Volumes/airflow/postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 60s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${ADMIN_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${ADMIN_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

volumes:
  postgres-db-volume:

configs:
  pgadmin_pgpass_conf_file:
    content: ${ROAD_ACCIDENTS_POSTGRES_HOST}:${ROAD_ACCIDENTS_POSTGRES_PORT}:${ROAD_ACCIDENTS_POSTGRES_DB}:${ADMIN_USERNAME}:${ADMIN_PASSWORD}
  pgadmin_servers_conf_json:
    content: |
      {"Servers": {"1": {
            "Name": "RoadAccidents",
            "Group": "Servers",
            "Host": "${ROAD_ACCIDENTS_POSTGRES_HOST}",
            "Port": ${ROAD_ACCIDENTS_POSTGRES_PORT},
            "MaintenanceDB": "${ROAD_ACCIDENTS_POSTGRES_DB}",
            "Username": "${ADMIN_USERNAME}",
            "UseSSHTunnel": 0,
            "TunnelPort": "22",
            "TunnelAuthentication": 0,
            "KerberosAuthentication": false,
            "PassFile": "/pgpass",
            "ConnectionParameters": {
                "sslmode": "prefer",
                "connect_timeout": 10  
      }}}}